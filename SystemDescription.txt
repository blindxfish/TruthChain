🧭 TruthChain System Overview
TruthChain is a decentralized blockchain that permanently stores user-submitted text posts. Instead of financial tokens, the network uses characters as a resource — each post costs characters to write.

🧱 Blockchain stores immutable signed text posts

🕓 Characters are earned passively by keeping a node online

🧾 Posts are signed using a local wallet (public/private key)

🔁 Characters can be sent between users

🔐 All actions are cryptographically verifiable

📦 Blocks are created when enough characters are accumulated — not by time

🔄 Bitcoin-style restart system with persistent configuration

🔗 Self-connection detection prevents duplicate peer counting

🛠️ System Design Summary
1. Characters as Currency
280,000 characters are generated per day (≈ 1,000 tweets).

These are split evenly across online nodes.

As more nodes join, each node earns fewer characters.

Characters can be traded or spent on posting.

2. Blocks and Posts
Blocks are committed when a character threshold (e.g. 100KB worth of posts) is reached.

Posts are signed and stored immutably.

The chain is append-only and always growing.

3. Nodes
Each node is a self-contained binary that:

Maintains the blockchain

Hosts an HTTP API on localhost for wallet/frontend use

Earns characters for uptime

Accepts and verifies new posts or transfers

Remembers configuration between restarts (Bitcoin-style)

Prevents self-connections and duplicate peer counting

4. Frontend (Optional)
Web, TUI, or GUI frontends can connect via the local API

All authentication/signing is local via private key

📋 Implementation Plan (Modular & Progressive)
🧱 1. Project Structure

truthchain/
├── cmd/            # main.go entry point
├── api/            # Local HTTP API for frontends
├── chain/          # Block, post, hash logic
├── wallet/         # Key management, signing
├── store/          # BoltDB logic
├── miner/          # Uptime tracker & reward logic
└── utils/          # Hashing, encoding, common tools
🚀 2. Milestone Breakdown
✅ Milestone 1: Init & Wallet
Generate and save ECDSA wallet (secp256k1)

CLI: show wallet address (public key)

Load or create wallet on node start

✅ Milestone 2: Block & Post Logic
Define Post and Block structs

Implement hash, sign, and verify methods

Collect valid posts in memory

Commit block when N characters are accumulated

✅ Milestone 3: Local Storage (BoltDB)
Save/load blocks

Save posts by hash

Track current block index

Track total characters owned per user

✅ Milestone 4: Uptime Tracker
Node logs uptime (heartbeats)

Every 24h: divide 280,000 characters among all active nodes

Reward characters to the wallet

✅ Milestone 5: Local HTTP API
Expose endpoints:

GET /status – node info

GET /wallet – address, char balance

POST /post – submit signed post

GET /posts/latest – recent posts

POST /characters/send – send characters

✅ Milestone 6: Character Transfer
Add signed transfer payload format

Update balances on both sides

✅ Milestone 7: Post Validator & Chain Sync
Validate signature and balance for incoming posts

Store valid ones

Prepare later: sync posts/blocks with peers

📦 Core Data Structures (Simplified)

type Post struct {
    Author    string // public key
    Signature string // signed content hash
    Content   string // text (counted in chars)
    Timestamp int64
}

type Block struct {
    Index     int
    Timestamp int64
    PrevHash  string
    Hash      string
    Posts     []Post
}
🌍 Future: P2P Node Networking
Once core local node is stable:

Peer discovery via known seed nodes

Gossip protocol for new blocks/posts

Sync missing blocks

Anti-spam & replay protection

🔒 Security Model
All posts and transfers signed with private key

Local API only (127.0.0.1) — no exposed network ports by default

Frontends act only as display + signing tools

Node is the source of truth 